/* Srknc: Grid Sistemi v.1.2  **/

@use 'sass:math';

$grid-columns: 12;
$gutter: 40px;
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1440px,
);
$container-max-widths: (
  xs: auto,
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px,
);

@mixin grid($max-widths: $container-max-widths, $breakpoints: $breakpoints, $grid-columns: $grid-columns, $gutter: $gutter) {

  @if not variable-exists(container-max-widths) or not $max-widths {

    /* I get output to the CSS file */
  }

  @each $breakpoint, $value in $breakpoints {
    $device: $breakpoint;
    $keys: map-keys($breakpoints);
    $col-list: null;
    $i: index($breakpoints, $breakpoint $value);
    $child: 0;

    @if $i > 0 and $i < length($breakpoints) {

      @media (min-width: $value) and (max-width: map-get($breakpoints, nth($keys, ($i + 1)))) {
        .hidden-#{$breakpoint} {
          display: none !important;
        }
        .visible-#{$breakpoint} {
          display: initial !important;
        }
      }
    }

    @media (min-width: $value) {

      @for $i from 1 through $grid-columns {
        .col-#{$breakpoint}-#{$i},
        %col-#{$breakpoint}-#{$i} {
          $width: math.div(100, $grid-columns) * $i * 1%;
          // flex: 0 0 math.div(100% / #{$grid-columns} * #{$i} - #{$gutter});
          flex: 0 0 (math.div(100, $grid-columns) * $i) * 1%;
          padding-right: #{math.div($gutter, 2)};
          padding-left: #{math.div($gutter, 2)};
          max-width: (math.div(100, $grid-columns) * $i) * 1%;
        }
        .size-#{$breakpoint}-#{$i},
        %size-#{$breakpoint}-#{$i} {
          flex: 0 0 auto;
          width: (math.div(100, $grid-columns) * $i) * 1%;
        }
        .flex-#{$breakpoint}-#{$i},
        %flex-#{$breakpoint}-#{$i} {
          flex: $i 0 math.div(100, $grid-columns) * $i * 1%;
          padding-right: #{math.div($gutter, 2)};
          padding-left: #{math.div($gutter, 2)};
        }
        .split-#{$breakpoint}-#{$i},
        %split-#{$breakpoint}-#{$i} {
          box-sizing: border-box;
          padding-right: #{math.div($gutter, 2)};
          padding-left: #{math.div($gutter, 2)};
          width: math.div(100, $i) * 1%;
        }
        $col-list: append ($col-list, unquote('.col-#{$breakpoint}-#{$i}, .flex-#{$breakpoint}-#{$i}, .size-#{$breakpoint}-#{$i}'), comma);
      }

      #{$col-list} {
        box-sizing: border-box;
        // display: initial !important;
        // border: 1px solid red;
        display: flex;
        flex-direction: column;
      }

      .container {
        box-sizing: border-box;
        margin: 0 auto;
        padding: 0 #{math.div($gutter, 2)};
        max-width: map-get($max-widths, $breakpoint);
        width: 100%;
      }

      .row {
        // width: math.div(100% + #{$gutter});
        box-sizing: border-box;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        margin: 0 - #{math.div($gutter, 2)};
      }
    }
  }

  [class*='column-']:last-child {
    padding-right: 0;
  }
}

@include grid();
